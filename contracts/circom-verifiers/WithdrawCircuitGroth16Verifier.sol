// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract WithdrawCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11707274581858258333913067364946259730269119880905399905761218649367661295437;
    uint256 public constant DELTA_X2 =
        13644498242420876478524860741183641964527889247282815172767293296687470528871;
    uint256 public constant DELTA_Y1 =
        1069018784085656862553989969072777569730533145959418362127012872687240898653;
    uint256 public constant DELTA_Y2 =
        14572774829902292550471756563783137644266167549522322371583472343233827802364;

    uint256 public constant IC0_X =
        4665213559817028349710523218267299521826903118353988508184817239618636325942;
    uint256 public constant IC0_Y =
        20160440454399386681202396427373162547499075255368663641504102203942709689998;
    uint256 public constant IC1_X =
        18800513048145531992897545772877235370200610327936396976859257084783403745020;
    uint256 public constant IC1_Y =
        11767613122029441877228436370003035887714598618418814320140052656400632989011;
    uint256 public constant IC2_X =
        16426745270904986206102726985484750435722480574615161099656671381642824102463;
    uint256 public constant IC2_Y =
        10003267536843755772082132252009632412676347246349924726709492197508536999172;
    uint256 public constant IC3_X =
        14338520143568091410259211618945322925984118024733831225845594060173910691242;
    uint256 public constant IC3_Y =
        6676711450856802026792655443595398901584933212807087470143622149468731931014;
    uint256 public constant IC4_X =
        19888903722125757262301691538345168989088862119816609423599463900041947700681;
    uint256 public constant IC4_Y =
        11337886805479601948507111614826488877348438569086193883535947186479002443472;
    uint256 public constant IC5_X =
        9541276258252900520331786903810413801557983332025367527494769531140193926196;
    uint256 public constant IC5_Y =
        17542955290834530660109083090572618802971978850706660002350995884091867957729;
    uint256 public constant IC6_X =
        4724519816195278400121118339924818869555936402057923301928132747082553965195;
    uint256 public constant IC6_Y =
        170506481491911293752826389145370339226009163653637444268833057762911532599;
    uint256 public constant IC7_X =
        18008727566091879077825448810971769569686301533156372468638328886627366610522;
    uint256 public constant IC7_Y =
        21363025922275509453182555115622445442789754303086218188302477089938726148013;
    uint256 public constant IC8_X =
        21147247553560732219552650011579698601641362043822499667407305845105858132595;
    uint256 public constant IC8_Y =
        5773407446158752077664135347119473224473376016772739498081627072642150699452;
    uint256 public constant IC9_X =
        14144220591796076892195845113944827176511196878969783547545761479991115822670;
    uint256 public constant IC9_Y =
        1054274195356386395422954139562938719301974058612295498579098713886292222792;
    uint256 public constant IC10_X =
        14549452973322052307628137813473199051643795338760808874399987648430237660206;
    uint256 public constant IC10_Y =
        5375245460106134806104265600255959528981102100189385014387885672814142694528;
    uint256 public constant IC11_X =
        7938188101118037242019985747827308497789409671723062601399494746578385381587;
    uint256 public constant IC11_Y =
        10616097414968518340256458516191192277622583583152662245089807408222071286098;
    uint256 public constant IC12_X =
        15651647455355887062102051249645644500376858443057443163908706076779415926236;
    uint256 public constant IC12_Y =
        12799264591441699974569741179482337802301580495825140084283233755964001314814;
    uint256 public constant IC13_X =
        6256510229109262447044935100659939613769592176786873409832820966237663460762;
    uint256 public constant IC13_Y =
        15386947229139240192908474035312270521053021699098038149846460158982956485833;
    uint256 public constant IC14_X =
        11621194590646627616973671495356205825117539348494455329189780592754872887760;
    uint256 public constant IC14_Y =
        722096907665752388119423424328399069890456027946619360401607803539304071562;
    uint256 public constant IC15_X =
        16027833124279849550184114269778490019843531218174705865966538207256428950049;
    uint256 public constant IC15_Y =
        15167835678288939686469263444092080892790276843940677771746428114122276159559;
    uint256 public constant IC16_X =
        21649579376922324655982126893769728759011978253478936625542072766932748233768;
    uint256 public constant IC16_Y =
        9583203912855724562388871020566842302120956064717699319625383783999463389100;
    uint256 public constant IC17_X =
        21502440658348011078341109501418781514084203345678340344048986096433250868721;
    uint256 public constant IC17_Y =
        6544624142324075991513857589958408861068187518565659196083251793150459422073;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[17] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
