// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract MintCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        10860968639837454874330795514733280869738823122266371872132910544153657214824;
    uint256 public constant IC0_Y =
        149398825041003321559814317228517101554070788727315880816826421040034097460;
    uint256 public constant IC1_X =
        19034413764572488913872458109312310959117175578531991711108636460700096690070;
    uint256 public constant IC1_Y =
        14608887938576006816034612745700091149764235183747054037305187684683021322170;
    uint256 public constant IC2_X =
        15347967795593145223283572753641569925089745511276442248132566683181395957101;
    uint256 public constant IC2_Y =
        12337773447991450267277500178091884690987835370253929511396260438857859153536;
    uint256 public constant IC3_X =
        16009635685918883528826399646406824348570205772375584575016600487351328336158;
    uint256 public constant IC3_Y =
        14397198667013941778856960153538290738525168712542782633152649049006368261097;
    uint256 public constant IC4_X =
        2548235843038670186499780033540990100906303788746649595634337434217689186167;
    uint256 public constant IC4_Y =
        4818155982553828613262313682534064154339821427951645008636559347134385884928;
    uint256 public constant IC5_X =
        15676732322883207479036972692964033222932706137655185778391458047180002388294;
    uint256 public constant IC5_Y =
        11285666984841038481430582351552838189192260825385015353153431873345591438575;
    uint256 public constant IC6_X =
        19323460680389643345509855285232805947913053784973473271517470205746499053702;
    uint256 public constant IC6_Y =
        12838569158832482931305898580929756916154438066335784397802348502769657617972;
    uint256 public constant IC7_X =
        8224741237834138832125210371615035496957745437255524295091145960889217384389;
    uint256 public constant IC7_Y =
        8860499723879760704553843642835501249845962826722735276763316312324779548665;
    uint256 public constant IC8_X =
        21709953009969076958283415709352580454072153400901039172364094603431684972082;
    uint256 public constant IC8_Y =
        11657649301848698085463469222160881630520653073793039027515046818825164723562;
    uint256 public constant IC9_X =
        16258065692532869156303207141138545569107322835294961488436801363030788109279;
    uint256 public constant IC9_Y =
        8404407899620742424323514158085457263337542935416836025964591210506674353770;
    uint256 public constant IC10_X =
        1717288294107526748608907494430182249537463276403454316215420105880883212466;
    uint256 public constant IC10_Y =
        9307669261255478932717285835913123258772471849673246864967378240141545630622;
    uint256 public constant IC11_X =
        3207065936813670150166372972953873103593764286835849255575990133228614270490;
    uint256 public constant IC11_Y =
        17689459416561578026955116960233384492748878130838755345703059820168540383167;
    uint256 public constant IC12_X =
        13739230728492144129045182890911142412056940433706442912542191687959738506074;
    uint256 public constant IC12_Y =
        13947660394979408991960004234583617499043061940046653543646448173511946364706;
    uint256 public constant IC13_X =
        9252747928005026858074314681323402569235341496377997759734303830041610131349;
    uint256 public constant IC13_Y =
        18330366088056604939084774110608049767516992334008421068494815886363044594208;
    uint256 public constant IC14_X =
        6277272492800551125610407043346641607886761617703246553362732653817478063767;
    uint256 public constant IC14_Y =
        7795729195650132220762080043683510203311817032196022097497995416804892515763;
    uint256 public constant IC15_X =
        16531143821430514272203461587253187297312962050654718705270339220031645354125;
    uint256 public constant IC15_Y =
        1815318708290300455234026072698765364601250123282395625321371296310055181913;
    uint256 public constant IC16_X =
        13786754565382045126873694750396014484207727917454419636063966888920845043442;
    uint256 public constant IC16_Y =
        4868991893991052690753904537052028440267107620004361427854647805365750972139;
    uint256 public constant IC17_X =
        13144141291943729175772728609611127512056435529623117220286634239828956308447;
    uint256 public constant IC17_Y =
        15123374094891646027678103415490316078071356659746927379385754591586918813186;
    uint256 public constant IC18_X =
        20074185010326247920449065060375093416389512311543990887181338569831348296501;
    uint256 public constant IC18_Y =
        876284868386196561099419006955465777000392787344898404113658941247776266107;
    uint256 public constant IC19_X =
        11235106840930566253215655547916937710907227997254189925179933112493044993892;
    uint256 public constant IC19_Y =
        16415104058659622180149131706044894605155620098434544690559759655252668115048;
    uint256 public constant IC20_X =
        4398518956059784372233769512637594058176623823518738272433910195950130504362;
    uint256 public constant IC20_Y =
        3244035516054364214565191525898193640474932918532757518796995710778485661279;
    uint256 public constant IC21_X =
        17660334284669407161537154267550143554186561504749779115983133484668062816603;
    uint256 public constant IC21_Y =
        1853816475991999710950597734968943874744450021974123664522729545946497334301;
    uint256 public constant IC22_X =
        7641489470016449001788936851060248127550111109715127638824536650672594256514;
    uint256 public constant IC22_Y =
        5386932840668570795562253194726748437949172552494531106010312329116570760647;
    uint256 public constant IC23_X =
        21074939720228193414849730037663302144758484344362756333967504865481917895390;
    uint256 public constant IC23_Y =
        14399633912143474891412563369272829311202869937536719794226848821454082179868;
    uint256 public constant IC24_X =
        12893618340675843386333884655724279609016786745446314533183270462240482438573;
    uint256 public constant IC24_Y =
        11816102843389101944766637639141435547535925997988046857712975474200095033214;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[24] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
