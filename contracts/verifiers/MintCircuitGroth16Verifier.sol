// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract MintCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        20775283685089992549824545122284054963747592244982235379705899149418847819488;
    uint256 public constant DELTA_X2 =
        16696000879561522186989436107660265163879490283679517221305252690106660590559;
    uint256 public constant DELTA_Y1 =
        7260729634342217353411172992214349128675180989514604621557109564366517093420;
    uint256 public constant DELTA_Y2 =
        10147395146174717833439225317940037670903045260024788703579997526394500595446;

    uint256 public constant IC0_X =
        15729840327997927700846444856605141541714695374642599900079254824932567375289;
    uint256 public constant IC0_Y =
        14513353629017983890866611893616243542282880018200138726052951710004591737633;
    uint256 public constant IC1_X =
        13209759875756996557350172911199606061299306917539031549344536996719228125098;
    uint256 public constant IC1_Y =
        21382696029833713189268704682894207780192708172442797312015596081534680394803;
    uint256 public constant IC2_X =
        15429064121526021773246500962295879709963104731819881045416465881741981766682;
    uint256 public constant IC2_Y =
        13278037169696800549592542228758657306976270015670855145245254226520132604722;
    uint256 public constant IC3_X =
        21017202620885280889375454311164314736914852843816714908824711217834354722981;
    uint256 public constant IC3_Y =
        7672939523394573225235780895787247920383001022998779253242409646995078041354;
    uint256 public constant IC4_X =
        8518812883431471613271638989156588472411058111479761049541404463110274784100;
    uint256 public constant IC4_Y =
        20370409597592272298405662750215067075544231762060935339280024231987141766189;
    uint256 public constant IC5_X =
        14434466671747029728804945859691930215850230928598523904872426417329233497248;
    uint256 public constant IC5_Y =
        13729855172023720328145644419330892020762218314294472722532847632956049568081;
    uint256 public constant IC6_X =
        7823334396267664932244796713691985705636692693146258381182265738649682985423;
    uint256 public constant IC6_Y =
        17940956747090907650319686226120539734725031518047652645001468403789895256641;
    uint256 public constant IC7_X =
        6594660013252281979182426983793364455409265208504930433349638773189311229117;
    uint256 public constant IC7_Y =
        16867591304008566129047903086883321137980781800870547407769801632967376047895;
    uint256 public constant IC8_X =
        20468823100127487404235073135638841593062330717123628569980297924873355119162;
    uint256 public constant IC8_Y =
        9267688261083200609859901854781640315528087813303814490493687360360782039140;
    uint256 public constant IC9_X =
        13095416388526309048358084393231633765510749401295678226938350137087050418299;
    uint256 public constant IC9_Y =
        4390566843254692600401336144562890082820198898268058854203514743059155269146;
    uint256 public constant IC10_X =
        15352399249334353128450254052241849972093404275332725555351694355796101786853;
    uint256 public constant IC10_Y =
        11593738178380730882642269535027600493044212211799977765422543612410961678934;
    uint256 public constant IC11_X =
        7363850217827041290300972113333669757922444154127474074552428644317098815109;
    uint256 public constant IC11_Y =
        10311331428682436067479085716358993452448089270077835790373616960655891387887;
    uint256 public constant IC12_X =
        1742331464944439901557597280897754733502994335031623404468317006171745101756;
    uint256 public constant IC12_Y =
        12771078870587993832214966107720318233464635010838986149617008089908653773689;
    uint256 public constant IC13_X =
        336210276356005659532446029750278759872010385113920782316730794387868952283;
    uint256 public constant IC13_Y =
        4617523015931415330941971657620124489466924047529528937142420904386450272781;
    uint256 public constant IC14_X =
        11873082638127453658893513240646292223161856784502040492703262678904275442187;
    uint256 public constant IC14_Y =
        6428855189593091851037753373378970352412621148033460460949277521856885942874;
    uint256 public constant IC15_X =
        14834311805798145713816263613747405145560904308954927566386734209989511832611;
    uint256 public constant IC15_Y =
        4185092680560810407127636890144184027877391713048036207492751158936187625326;
    uint256 public constant IC16_X =
        21169217069982162284344091879708917539503274206459908127182228418389396799285;
    uint256 public constant IC16_Y =
        9543265346559767122348155764178698518043925059455136169846393565293371091221;
    uint256 public constant IC17_X =
        1291002758697916862052550100787724991276797974847803238087997261430165505652;
    uint256 public constant IC17_Y =
        20416578937527334725264166145407697048549180560904881459640268291794239473103;
    uint256 public constant IC18_X =
        15937479433956409055329426102302123974103607219571363146703414650311553416440;
    uint256 public constant IC18_Y =
        11903870533973775381610936842005498600052114891296695408910463236569503061385;
    uint256 public constant IC19_X =
        17586584757530290337613787652424084101794567447955690852661461856725017184855;
    uint256 public constant IC19_Y =
        18221613345431969749145430555151119026044501124283493307771612246077940287924;
    uint256 public constant IC20_X =
        16033239680716299318486367877789500469828140378419960230390398225287423732634;
    uint256 public constant IC20_Y =
        6736344799366252120686929651767096975105589396915351738670741100329737395607;
    uint256 public constant IC21_X =
        21203170438323391308917940930713558551954730655463109526792151543782893618583;
    uint256 public constant IC21_Y =
        7201625084808534487838974665367347954543808602644457564266776699335001955341;
    uint256 public constant IC22_X =
        20024576832408960314507053497651020652333535873078637326018262354846530608735;
    uint256 public constant IC22_Y =
        21139599630897967205376329464073566535444902913953424401365406058232563209327;
    uint256 public constant IC23_X =
        11210247352709749281414837794587081227429705536853055151269867512357809514133;
    uint256 public constant IC23_Y =
        5239445691650761191156662180279024560069086744625368534696493531341082461706;
    uint256 public constant IC24_X =
        1450785659678468468552821300108337523333997928250608799235920497816992401845;
    uint256 public constant IC24_Y =
        2355718049780969609194013341523133038370983263098734568793879618495296445460;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[24] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
