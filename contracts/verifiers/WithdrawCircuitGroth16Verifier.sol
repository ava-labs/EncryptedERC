// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract WithdrawCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        8763213589217948950394799795769286711451470309858517353548257105496321918974;
    uint256 public constant DELTA_X2 =
        8718971761921496478627725624504577185030219921948088710718043119604446482160;
    uint256 public constant DELTA_Y1 =
        12100426262880726230576153666490049974109421564634821511372328268166988730222;
    uint256 public constant DELTA_Y2 =
        9332102236042672582375857453207267624696094930693258773477787155996767872997;

    uint256 public constant IC0_X =
        4665213559817028349710523218267299521826903118353988508184817239618636325942;
    uint256 public constant IC0_Y =
        20160440454399386681202396427373162547499075255368663641504102203942709689998;
    uint256 public constant IC1_X =
        18800513048145531992897545772877235370200610327936396976859257084783403745020;
    uint256 public constant IC1_Y =
        11767613122029441877228436370003035887714598618418814320140052656400632989011;
    uint256 public constant IC2_X =
        16426745270904986206102726985484750435722480574615161099656671381642824102463;
    uint256 public constant IC2_Y =
        10003267536843755772082132252009632412676347246349924726709492197508536999172;
    uint256 public constant IC3_X =
        14338520143568091410259211618945322925984118024733831225845594060173910691242;
    uint256 public constant IC3_Y =
        6676711450856802026792655443595398901584933212807087470143622149468731931014;
    uint256 public constant IC4_X =
        17736847174986619100167936432916068465190718157649922560963649749485990463255;
    uint256 public constant IC4_Y =
        18991222246168302622903212785773711448820573048463932297189815533503712962078;
    uint256 public constant IC5_X =
        16897232793804689882989888910604596446408315599850642180203597010743829355013;
    uint256 public constant IC5_Y =
        9902530606745915575751269248583133948387654794718410063965510843131614598946;
    uint256 public constant IC6_X =
        3992553446638131049136954073283977049934397944612407164250290015196095960682;
    uint256 public constant IC6_Y =
        17660572607512099255968590186521699854921056603442701442389679168658175318022;
    uint256 public constant IC7_X =
        20316186776110249521230457908374983400049081011651660109208934646124966041577;
    uint256 public constant IC7_Y =
        18939369615041467254820079296313010408108604412870327189719917813033779107114;
    uint256 public constant IC8_X =
        19967176612042980782674903313539441982887976651560803278990321955893749694904;
    uint256 public constant IC8_Y =
        17307766706066327857027184361806742159699001989737722982658418509642373455042;
    uint256 public constant IC9_X =
        20249053338064816053319842659572508035439314434393300146911602193569234490772;
    uint256 public constant IC9_Y =
        8679048755337041365058819220403472132272778276922892605816200188218250882548;
    uint256 public constant IC10_X =
        13468990067311670415971575032146639532501364237247527296304000691830153195783;
    uint256 public constant IC10_Y =
        18807751177855700164964345481696389947638035081519578730209558845954834744063;
    uint256 public constant IC11_X =
        13385614476993992388847306668873959279823603733028254280607851978498146155795;
    uint256 public constant IC11_Y =
        3439968931595469051413206975425872597965512052870889642911211672658532569509;
    uint256 public constant IC12_X =
        10504747477637592204536039964583706001952207422248331929159450688553358895120;
    uint256 public constant IC12_Y =
        18475145410524360396453527423668884130071220067175868190851402985411835741324;
    uint256 public constant IC13_X =
        10844975369656013425246807956885405118595221441046421161012718863141456315551;
    uint256 public constant IC13_Y =
        13221686346484371083682217015054969893221310212384792476643720371270654353665;
    uint256 public constant IC14_X =
        1888499422505983447222187017493551262185308129861289821126340761578855040973;
    uint256 public constant IC14_Y =
        7482388082434541100713368683423039470765297388736937560410843624329961431065;
    uint256 public constant IC15_X =
        21248025782615603386967055796941800884894249900775561882428452315664677682335;
    uint256 public constant IC15_Y =
        19432905553575368164042106503022030314557010160685537282334958148689995655849;
    uint256 public constant IC16_X =
        12540099929118429720185820101706776290148425784736099667567684671512604835004;
    uint256 public constant IC16_Y =
        17408902694157313271111086509615303656091676334341888865140985995950472060802;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[16] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
