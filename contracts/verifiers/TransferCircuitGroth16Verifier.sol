// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract TransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        15169612458182849917321186024496346671129279321118338542651369554266379017085;
    uint256 public constant IC0_Y =
        5883558260709490241188004161010972813220275125830673994572646875577119316343;
    uint256 public constant IC1_X =
        16100690502609159408653090728720726521872602615601468990396282910515708452281;
    uint256 public constant IC1_Y =
        206473225703579274879727630511223878456830800847367903397968804909749557343;
    uint256 public constant IC2_X =
        11827179596618501085478939713893246535565062246311354431181510922214664680764;
    uint256 public constant IC2_Y =
        19112214147013272096356735195328987946350393031974080687710231312056244026296;
    uint256 public constant IC3_X =
        5581990366675738727219988643654526170608021380184396429300392536005094320734;
    uint256 public constant IC3_Y =
        17088182350955054244990473571665854790202891676215645713600760496433744649313;
    uint256 public constant IC4_X =
        16959969743479793868892207501361960632173804778850405125343042015439797621993;
    uint256 public constant IC4_Y =
        3389023874033208744026365833929461353535019642587060517925845441531248145527;
    uint256 public constant IC5_X =
        17114061397150814690129509736068662764360373345950774793082290753164178361214;
    uint256 public constant IC5_Y =
        11130913654167432114624232145748826776297196252112254933232440981443495347654;
    uint256 public constant IC6_X =
        12650127030245726826368429836546141787552419549942063801172205276822209822670;
    uint256 public constant IC6_Y =
        10126693535310294410374698491376122808269046644359210325873302620835162795029;
    uint256 public constant IC7_X =
        6378232078805986129873108254985310787931576955123441255417514232883529258952;
    uint256 public constant IC7_Y =
        16360445570345514877780293254403635569273789619969247495161086331554897422820;
    uint256 public constant IC8_X =
        18773254363704330401403881543901691105931841001881672455992134279453919035864;
    uint256 public constant IC8_Y =
        2791062046462476428396659114783353888288325107167531552711335913010782441719;
    uint256 public constant IC9_X =
        13620931336356341010535548598120634393082030718212366732958466347409532449496;
    uint256 public constant IC9_Y =
        4545600367964906903988021505011329604350657651667610653583240366448425915542;
    uint256 public constant IC10_X =
        3957431407719203270866810126520812032471984314246186047716519335792431962410;
    uint256 public constant IC10_Y =
        21532036337494032308639720367060896104784347690204671153888840890338019502335;
    uint256 public constant IC11_X =
        10794140794242675763002891962640384614220483899316528883046773805246263394344;
    uint256 public constant IC11_Y =
        18422488791306664452377338486302542401373508142328561858186097316797734540192;
    uint256 public constant IC12_X =
        4485610662536889716044135727062434423680151784568694719759941584010292260821;
    uint256 public constant IC12_Y =
        11765537001063190718262911836521235136467570714588964618131006003508208751851;
    uint256 public constant IC13_X =
        16705894554502012094729166782827381098160242235109921457921135859365872507062;
    uint256 public constant IC13_Y =
        19562914411493072082146108289458500544351445982265793763660029806911551819478;
    uint256 public constant IC14_X =
        1959560480052454389220732541963039267922655514737180495975187990595734363177;
    uint256 public constant IC14_Y =
        15742294966044988775999838444376508561424584500526433730234603706530930480847;
    uint256 public constant IC15_X =
        5893650727548364582908990589602022626744617293183029079056017130364939415012;
    uint256 public constant IC15_Y =
        14317520285436202287936096022396677657137799933216812576024899338545446498646;
    uint256 public constant IC16_X =
        21418142690586379669297441241644331625551942453061117557854421885745114754523;
    uint256 public constant IC16_Y =
        1673792091639732911132596755723897496314269363404754048812301386458575295449;
    uint256 public constant IC17_X =
        7410941702641537785903650326183678312814291673744413366882023916988273736003;
    uint256 public constant IC17_Y =
        4754647803100702704412163569808053293308385666890026059918199441516291287082;
    uint256 public constant IC18_X =
        9718807543269147892676521023112863994381244792750904509988872509526416787284;
    uint256 public constant IC18_Y =
        1752565225851095594778567578254820457577591944648396750812660146629684986749;
    uint256 public constant IC19_X =
        6305312306889415321871559819390387057098558572455819114911802788647917168005;
    uint256 public constant IC19_Y =
        16387170726584379698922016757654938928448403557191901873575760300212724475433;
    uint256 public constant IC20_X =
        6754531783852042072848904826393573045115944639470943316529488904269349726255;
    uint256 public constant IC20_Y =
        12134401938995194657379278355250187605843335108975820853543411547274557001472;
    uint256 public constant IC21_X =
        669286119859211303609243184904115921897932685900642199466771488768508837698;
    uint256 public constant IC21_Y =
        4490855738448887177850534676386401979470697653858816248815336496119114585284;
    uint256 public constant IC22_X =
        2588547471191046919642378418284615090407861479094967462936448490169688870786;
    uint256 public constant IC22_Y =
        10068652952831512123075920784941056748130744391769255341906502387170661991576;
    uint256 public constant IC23_X =
        12377108143209738506624758087562456592338431418486044037040162516813059106139;
    uint256 public constant IC23_Y =
        10796866635473215494038876345169160631318500711603384139131025585042855942978;
    uint256 public constant IC24_X =
        517646371040674642642919317944108210217416893375014944341542023309411190554;
    uint256 public constant IC24_Y =
        10200942381779180196529866456056967191226060195731688988379128009287535197739;
    uint256 public constant IC25_X =
        19945312189444051189995095952644804621971686558188570030564134238931840079836;
    uint256 public constant IC25_Y =
        16565191226896832989134661674898494213138317285606736416942579909308325093144;
    uint256 public constant IC26_X =
        2705107476902388160962509186292915257437699394509143772759360176215637942593;
    uint256 public constant IC26_Y =
        12497310367829831007581026335378127103639045944567602690027194685008875742792;
    uint256 public constant IC27_X =
        17153294999192460736638433179886761800865991006377391281705692426495856979319;
    uint256 public constant IC27_Y =
        7972229552457250173174069788908797096615138790090234925397832569614632671858;
    uint256 public constant IC28_X =
        3675418436728225476550393941527499842378461907173381723667098414127785277932;
    uint256 public constant IC28_Y =
        7015802263784373336218916102117714574184897978621128514596356300912700351787;
    uint256 public constant IC29_X =
        19943230613909472794006267787072232020214873151456174612888860872772037366571;
    uint256 public constant IC29_Y =
        1141040398812358121193024710479398754807862806834498638230084654135317879261;
    uint256 public constant IC30_X =
        1571215885800761692893135418852366676231292106835649442142197039156502871652;
    uint256 public constant IC30_Y =
        15782836611816883542965131698106116923585183488601492012889245305813506958942;
    uint256 public constant IC31_X =
        5093132061926248623895211052361733917942245166148638623647306543411935995548;
    uint256 public constant IC31_Y =
        10947541237575158955851512185044682061891770458037032219165347574397263645750;
    uint256 public constant IC32_X =
        13130630857829340109081369321377606180756484673084979404910975019706132261433;
    uint256 public constant IC32_Y =
        11773396829503369539150750579640463772215450541901173833482441085944318068033;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
