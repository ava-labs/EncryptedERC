// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract TransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        728252206714857484613741010999249279072069077833150938505273464002201316157;
    uint256 public constant DELTA_X2 =
        15366409435567472884203290920039752679395381473046168295240779525087052659203;
    uint256 public constant DELTA_Y1 =
        12667849890796881830795214885860699885897378651924833722443567231579635958968;
    uint256 public constant DELTA_Y2 =
        12522563020355756818671232664052178763188476850591270775785022318712655238738;

    uint256 public constant IC0_X =
        19169850710306997583814022038681785526080568178809522369434504130960255257336;
    uint256 public constant IC0_Y =
        18174222696678144391109418570430789305050224561763191514209334404295806331997;
    uint256 public constant IC1_X =
        6123205486213859067779301309983030756234860531177415230458925665339910864689;
    uint256 public constant IC1_Y =
        15927480551419185243836399160852629629184225278332364854406381020914257516186;
    uint256 public constant IC2_X =
        20987867721767166162901815495810387492382108799386067769994358840864195109915;
    uint256 public constant IC2_Y =
        12374621409502155327466154171136924357603528501683016620363164358301041502594;
    uint256 public constant IC3_X =
        11978268413804982089158992860502393389562923278810207434338711544895991416373;
    uint256 public constant IC3_Y =
        354733971122669725089267385450080960626657865532375990583143663090170973529;
    uint256 public constant IC4_X =
        1526600879175784728729629750255885987279138631999460432989341678595044941051;
    uint256 public constant IC4_Y =
        17229117752455764544936723930930690602533899228254986663082604055035609619037;
    uint256 public constant IC5_X =
        11207077491778675599691269096109811289752579418378660846214604773048529732433;
    uint256 public constant IC5_Y =
        17234557782182010816756762396064970939520106589284051499761912749266525245208;
    uint256 public constant IC6_X =
        18963682109923498236858390717323625599189688097147877522972420012748521672833;
    uint256 public constant IC6_Y =
        2581666414273131130917962201337292596590495667941134691846306040143106727872;
    uint256 public constant IC7_X =
        1100066038064815952671560798607997020990770655489890124863197957338134692141;
    uint256 public constant IC7_Y =
        14818250460750745961591275479401795195967539416527976662365771710775158565187;
    uint256 public constant IC8_X =
        3379674993482672899251404085400203073188664603572126103608662960463124706157;
    uint256 public constant IC8_Y =
        18120037635506124498055732249859772729496351820231282497892038175542581427598;
    uint256 public constant IC9_X =
        21086479863144451319611791305388270972191387012490713177589972643372526190409;
    uint256 public constant IC9_Y =
        13258089414530956204838979553039132839519047064263443443621396477669410428957;
    uint256 public constant IC10_X =
        16878541165707666415887858139775521371684412151474185313799148805243827928330;
    uint256 public constant IC10_Y =
        292540319485679508954752731211684723294660343676416378200446948180597397428;
    uint256 public constant IC11_X =
        12630747135105799254885270203087965983100785867452209518661059212458827416420;
    uint256 public constant IC11_Y =
        5039870512935890754203653497811194375459675878524765777175998037174455022466;
    uint256 public constant IC12_X =
        4472260936798958403781773577279646931793928960024864580700410025180779872180;
    uint256 public constant IC12_Y =
        19618145727146264498780889391207397279286624856134581987356411433720192794603;
    uint256 public constant IC13_X =
        17484008062507009426985260711746796123540785121009713769446712187783766469718;
    uint256 public constant IC13_Y =
        19033844594579221622947364199109152126124139792023450024826324070083796451925;
    uint256 public constant IC14_X =
        6427053326209866073532761798156151540060386642908047801065404406155834407679;
    uint256 public constant IC14_Y =
        1559840376877231534561562665408363940289612508730067134244676868248684436404;
    uint256 public constant IC15_X =
        11263636160648585271143744392454006935549124274340691583423858242966597652930;
    uint256 public constant IC15_Y =
        16169738148532763271043480823041179447495112954793410518199008359112570680801;
    uint256 public constant IC16_X =
        2649403129327083196328377435725943474999677334335643349683309375378267101507;
    uint256 public constant IC16_Y =
        13306298670345228487109257381687888277742059475533975149652075910832945574768;
    uint256 public constant IC17_X =
        8490601064074445969433330291770016218381485615609551123490557725731105921869;
    uint256 public constant IC17_Y =
        5998835957425573969861740411004507985301299335268839107943657726278259372896;
    uint256 public constant IC18_X =
        10188180800142139019467869122614640081171168257287594894967568795913975551839;
    uint256 public constant IC18_Y =
        2719578582373244286700933370409811520631296008295593092071822718465077699313;
    uint256 public constant IC19_X =
        21854067387996680771316759188105838369507662630288441143178686196905320906450;
    uint256 public constant IC19_Y =
        16841498548370411721497212286748058691934487165085730201085397600036598581315;
    uint256 public constant IC20_X =
        21732305874161807365777705009152637209247645071496573998331721788863469571104;
    uint256 public constant IC20_Y =
        15413716790457024007266261304687384350727634234190294432993427419450103187086;
    uint256 public constant IC21_X =
        15055064240822719138925344420625097560879910151199615278343388612129020432461;
    uint256 public constant IC21_Y =
        6482440946682333721418693151731817552607446576881552764807470551418620339860;
    uint256 public constant IC22_X =
        19387413844130800835381558000964938372898106859154032525859321555404572767202;
    uint256 public constant IC22_Y =
        8748443072279257036452729918351041665217849811016483862814723635129185354430;
    uint256 public constant IC23_X =
        2245958742508924870222279486377493752993617023058540756515811550959551449592;
    uint256 public constant IC23_Y =
        2563413159310611209442864570458854640084789538829685436884627106629432272013;
    uint256 public constant IC24_X =
        6352080868364633040349602196770988078322421503280009863430827585917463168183;
    uint256 public constant IC24_Y =
        14800104040105528030858563932307238972742744899589839452142907153648637980683;
    uint256 public constant IC25_X =
        14879485751619840121475738668455984369693651718612498967866669392018016455119;
    uint256 public constant IC25_Y =
        5239828427204011748563253196227724885742063767290173486293326640667221451148;
    uint256 public constant IC26_X =
        17422477063124392541050473191860631497663597615079812288297790505701479551566;
    uint256 public constant IC26_Y =
        1768915507475030882460202001766493337265667663722848868364007451233942321966;
    uint256 public constant IC27_X =
        21802725020214153726835088773510869000767062256823642299558844275422569799518;
    uint256 public constant IC27_Y =
        21185090605189956386445960298781258024364231730764113488970765071772763937508;
    uint256 public constant IC28_X =
        879041937392345516122661365381645530857115943367212712839062584989398682261;
    uint256 public constant IC28_Y =
        12703880682179839581164590129187148596557806037984085046201987607801081946577;
    uint256 public constant IC29_X =
        17974833732235704324139592257717383392226280745961601153953523954995315367639;
    uint256 public constant IC29_Y =
        4498044503327496066282189498320176529544565292458748188103177356896505890213;
    uint256 public constant IC30_X =
        18562719988609696908090431497791002917437064818075451550766721879612857498654;
    uint256 public constant IC30_Y =
        964997876127357075825782578935347542296024514628704688704082367792925626149;
    uint256 public constant IC31_X =
        14912660075492332318460040581964347404335933351990103759036533897092446209609;
    uint256 public constant IC31_Y =
        20307201257281459204360245123867044268557601467408096989981886038968696509414;
    uint256 public constant IC32_X =
        8498560070339473458241812372777729226166157784654683130555918468609477306441;
    uint256 public constant IC32_Y =
        15907527709049193549485470149909859264583270027847070427202984380719782683876;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
